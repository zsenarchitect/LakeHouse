# LakeHouse SEO Auto-Updater
# This script automatically updates SEO meta tags and generates sitemap

param(
    [string]$Domain = "https://your-domain.com"
)

Write-Host "üöÄ Starting LakeHouse SEO Auto-Updater..." -ForegroundColor Green
Write-Host ""

# Configuration
$siteName = "LakeHouse"
$defaultDescription = "Rhino plugin for architects with powerful automation tools"
$defaultKeywords = "Rhino plugin, architecture software, area takeoff, object management"
$author = "LakeHouse"

# Page configurations with custom SEO data
$pageConfigs = @{
    "index.html" = @{
        title = "LakeHouse - Rhino Plugin for Architects | Area Takeoff, Object Management & More"
        description = "LakeHouse Rhino plugin for architects. Features include Area Takeoff, Object Manager, Content Merger, Layer Color Randomizer, and Random Select. No Grasshopper skills required."
        keywords = "Rhino plugin, architecture software, area takeoff, object management, layer management, architectural tools, Rhino 8, Grasshopper alternative, architectural automation"
        priority = "1.0"
        changefreq = "weekly"
    }
    "feature.html" = @{
        title = "LakeHouse Features - Area Takeoff, Object Manager, Content Merger & More"
        description = "Explore LakeHouse Rhino plugin features: Area Takeoff for live calculations, Object Manager for batch transformations, Content Merger for layer/material cleanup, Layer Color Randomizer, and Random Select."
        keywords = "Rhino features, area takeoff, object manager, content merger, layer color randomizer, random select, architectural tools"
        priority = "0.9"
        changefreq = "monthly"
    }
    "contact.html" = @{
        title = "Contact LakeHouse - Get Support for Rhino Plugin"
        description = "Contact LakeHouse for support, questions, or feedback about our Rhino plugin for architects. Get help with Area Takeoff, Object Manager, and other features."
        keywords = "contact LakeHouse, Rhino plugin support, architectural software help"
        priority = "0.7"
        changefreq = "monthly"
    }
}

# Feature page configurations
$featurePages = @{
    "feature_areatakeoff.html" = @{
        title = "AreaTakeOff - Live Area Calculations in Rhino | LakeHouse"
        description = "LakeHouse AreaTakeOff: Live area takeoff in Rhino viewport with dynamic calculations, Excel export, and layer-based filtering. Perfect for massing studies and area analysis."
        keywords = "area takeoff, Rhino area calculation, live area measurement, architectural area analysis, massing study tools"
        priority = "0.9"
        changefreq = "monthly"
    }
    "feature_objmanager.html" = @{
        title = "ObjManager - Batch Object Transformation in Rhino | LakeHouse"
        description = "LakeHouse ObjManager: Batch object transformation with random rotation, scale variation, and height adjustments. Create natural variation in architectural models."
        keywords = "batch object transformation, random rotation Rhino, object scaling, architectural variation, entourage modification"
        priority = "0.9"
        changefreq = "monthly"
    }
    "feature_contentmerger.html" = @{
        title = "ContentMerger - Merge Layers & Materials in Rhino | LakeHouse"
        description = "LakeHouse ContentMerger: Effortlessly merge layers and materials in Rhino, even within block definitions. Perfect for model cleanup and organization."
        keywords = "merge layers Rhino, merge materials, model cleanup, block definitions, architectural organization"
        priority = "0.9"
        changefreq = "monthly"
    }
    "feature_layercolorrandomizer.html" = @{
        title = "LayerColorRandomizer - Randomize Layer Colors in Rhino | LakeHouse"
        description = "LakeHouse LayerColorRandomizer: Instantly randomize layer colors for better visualization. Customizable color palettes and filter-based selection."
        keywords = "randomize layer colors, Rhino visualization, layer color management, architectural presentation"
        priority = "0.8"
        changefreq = "monthly"
    }
    "feature_randomselect.html" = @{
        title = "RandomSelect - Random Object Selection in Rhino | LakeHouse"
        description = "LakeHouse RandomSelect: Randomly reduce selection by percentage or break into groups. Perfect for rendering variation and design exploration."
        keywords = "random selection, percentage selection, object grouping, rendering variation, design exploration"
        priority = "0.8"
        changefreq = "monthly"
    }
}

# Function to auto-generate page config for new pages
function Get-AutoGeneratedPageConfig {
    param([string]$pageName)
    
    # Check if it's a feature page
    if ($pageName -match "^feature_.*\.html$") {
        $featureName = $pageName -replace "feature_", "" -replace "\.html", ""
        $titleCase = (Get-Culture).TextInfo.ToTitleCase($featureName.ToLower())
        
        return @{
            title = "$titleCase - LakeHouse Rhino Plugin Feature"
            description = "LakeHouse $titleCase`: Powerful Rhino plugin feature for architects. Streamline your workflow with automated tools and efficient processes."
            keywords = "$($featureName.ToLower()), Rhino plugin, architectural tools, automation, LakeHouse"
            priority = "0.8"
            changefreq = "monthly"
        }
    }
    
    # For other pages, generate based on filename
    $pageTitle = $pageName -replace "\.html", "" -replace "_", " "
    $pageTitle = (Get-Culture).TextInfo.ToTitleCase($pageTitle.ToLower())
    
    return @{
        title = "$pageTitle - $siteName"
        description = $defaultDescription
        keywords = $defaultKeywords
        priority = "0.7"
        changefreq = "monthly"
    }
}

# Function to generate meta tags
function Get-MetaTags {
    param([string]$pageName, [hashtable]$pageConfig)
    
    return @"
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>$($pageConfig.title)</title>
    
    <!-- SEO Meta Tags -->
    <meta name="description" content="$($pageConfig.description)">
    <meta name="keywords" content="$($pageConfig.keywords)">
    <meta name="author" content="$author">
    <meta name="robots" content="index, follow">
    
    <!-- Open Graph Meta Tags for Social Media -->
    <meta property="og:title" content="$($pageConfig.title)">
    <meta property="og:description" content="$($pageConfig.description)">
    <meta property="og:type" content="website">
    <meta property="og:url" content="$Domain/$pageName">
    <meta property="og:image" content="$Domain/asset/main_icon.svg">
    <meta property="og:site_name" content="$siteName">
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="$($pageConfig.title)">
    <meta name="twitter:description" content="$($pageConfig.description)">
    <meta name="twitter:image" content="$Domain/asset/main_icon.svg">
    
    <!-- Canonical URL -->
    <link rel="canonical" href="$Domain/$pageName">
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="asset/main_icon.svg">
    <link rel="apple-touch-icon" href="asset/main_icon.svg">
"@
}

# Function to update HTML file
function Update-HTMLFile {
    param([string]$filePath, [string]$newMetaTags)
    
    try {
        $content = Get-Content $filePath -Raw
        
        # Find and replace the meta section
        $metaStart = $content.IndexOf('<meta charset="UTF-8">')
        $headEnd = $content.IndexOf('</head>')
        
        if ($metaStart -ne -1 -and $headEnd -ne -1) {
            $beforeMeta = $content.Substring(0, $metaStart)
            $afterHead = $content.Substring($headEnd)
            $newContent = $beforeMeta + $newMetaTags + "`n    " + $afterHead
            
            Set-Content $filePath $newContent -Encoding UTF8
            Write-Host "‚úÖ Updated $filePath" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ö†Ô∏è  Could not find meta tags in $filePath" -ForegroundColor Yellow
            return $false
        }
    } catch {
        Write-Host "‚ùå Error updating $filePath`: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Function to generate sitemap
function Generate-Sitemap {
    $htmlFiles = Get-ChildItem -Filter "*.html" | Select-Object -ExpandProperty Name
    $currentDate = Get-Date -Format "yyyy-MM-dd"
    
    $sitemap = @"
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
"@
    
    foreach ($file in $htmlFiles) {
        $pageConfig = $pageConfigs[$file]
        if (-not $pageConfig) {
            $pageConfig = $featurePages[$file]
        }
        if (-not $pageConfig) {
            $pageConfig = Get-AutoGeneratedPageConfig $file
        }
        
        $sitemap += @"

    <url>
        <loc>$Domain/$file</loc>
        <lastmod>$currentDate</lastmod>
        <changefreq>$($pageConfig.changefreq)</changefreq>
        <priority>$($pageConfig.priority)</priority>
    </url>"
    }
    
    $sitemap += @"

</urlset>"
    
    Set-Content "sitemap.xml" $sitemap -Encoding UTF8
    Write-Host "‚úÖ Generated sitemap.xml" -ForegroundColor Green
}

# Function to update robots.txt
function Update-RobotsTxt {
    $robotsContent = @"
User-agent: *
Allow: /

# Sitemap location
Sitemap: $Domain/sitemap.xml

# Disallow any private or admin areas (if you add them later)
# Disallow: /admin/
# Disallow: /private/
"@
    
    Set-Content "robots.txt" $robotsContent -Encoding UTF8
    Write-Host "‚úÖ Updated robots.txt" -ForegroundColor Green
}

# Main execution
if ($Domain -eq "https://your-domain.com") {
    Write-Host "‚ö†Ô∏è  Please update the domain parameter when running this script" -ForegroundColor Yellow
    Write-Host "   Current domain: $Domain" -ForegroundColor Yellow
    Write-Host ""
}

# Find all HTML files
$htmlFiles = Get-ChildItem -Filter "*.html" | Select-Object -ExpandProperty Name
Write-Host "üìÅ Found $($htmlFiles.Count) HTML files: $($htmlFiles -join ', ')" -ForegroundColor Cyan
Write-Host ""

# Update each HTML file
$updatedCount = 0
foreach ($file in $htmlFiles) {
    $pageConfig = $pageConfigs[$file]
    if (-not $pageConfig) {
        $pageConfig = $featurePages[$file]
    }
    if (-not $pageConfig) {
        $pageConfig = Get-AutoGeneratedPageConfig $file
        Write-Host "üÜï Auto-generated SEO config for $file" -ForegroundColor Magenta
    }
    
    $newMetaTags = Get-MetaTags $file $pageConfig
    if (Update-HTMLFile $file $newMetaTags) {
        $updatedCount++
    }
}

# Generate sitemap and robots.txt
Generate-Sitemap
Update-RobotsTxt

Write-Host ""
Write-Host "‚úÖ SEO update complete! Updated $updatedCount/$($htmlFiles.Count) files" -ForegroundColor Green
Write-Host "üìã Next steps:" -ForegroundColor Cyan
Write-Host "   1. Update the domain parameter when running this script" -ForegroundColor White
Write-Host "   2. Run this script whenever you add new pages" -ForegroundColor White
Write-Host "   3. Submit sitemap.xml to Google Search Console" -ForegroundColor White
Write-Host ""
Write-Host "üí° Usage: .\update-seo.ps1 -Domain 'https://your-actual-domain.com'" -ForegroundColor Yellow 