"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  transformFile: () => transformFile,
  transformSource: () => transformSource,
  transformString: () => transformString
});
module.exports = __toCommonJS(src_exports);

// src/test-utils.ts
var import_fs = __toESM(require("fs"));
function isIterable(value) {
  return Symbol.iterator in value;
}
function transformFile(fn, filename, chain) {
  const data = import_fs.default.readFileSync(filename, "utf-8");
  const source = {
    filename,
    line: 1,
    column: 1,
    offset: 0,
    data
  };
  return transformSource(fn, source, chain);
}
function transformString(fn, data, chain) {
  const source = {
    filename: "inline",
    line: 1,
    column: 1,
    offset: 0,
    data
  };
  return transformSource(fn, source, chain);
}
async function transformSource(fn, source, chain) {
  const defaultChain = (source2) => [source2];
  const context = {
    hasChain: (
      /* istanbul ignore next */
      () => true
    ),
    chain: chain ?? defaultChain
  };
  const result = await fn.call(context, source);
  if (isIterable(result)) {
    return await Promise.all(Array.from(result));
  } else {
    return [result];
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  transformFile,
  transformSource,
  transformString
});
//# sourceMappingURL=test-utils.js.map
